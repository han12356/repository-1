import chromadb
import nltk
import os
import ssl
import requests
import gzip
from io import BytesIO

nltk_data_path = os.path.join(os.path.expanduser("~"), "nltk_data")
nltk.data.path.append(nltk_data_path)
print("NLTK 데이터 경로:", nltk_data_path)

chroma_client = chromadb.Client()

collection = chroma_client.create_collection(name="library_collection")

with open("school.txt", "r", encoding="utf-8") as file:
    text = file.read()

if not os.path.exists(os.path.join(nltk_data_path, "corpora", "stopwords", "korean")):
    stopword_url = "https://raw.githubusercontent.com/stopwords-iso/stopwords-ko/master/stopwords-ko.txt.gz"

    response = requests.get(stopword_url)

    if response.status_code == 200:
        compressed_data = BytesIO(response.content)

        with gzip.open(compressed_data, "rt", encoding="utf-8") as uncompressed_file:
            stopwords_dir = os.path.join(nltk_data_path, "corpora", "stopwords")

            os.makedirs(stopwords_dir, exist_ok=True)

            with open(os.path.join(stopwords_dir, "korean"), "w", encoding="utf-8") as stopwords_file:
                for line in uncompressed_file:
                    stopwords_file.write(line.strip())

        print("불용어 데이터 다운로드 및 저장 완료")
    else:
        print("불용어 데이터 다운로드 실패")
else:
    print("불용어 데이터 이미 존재합니다.")

from nltk.corpus import stopwords

stop_words = set(stopwords.words("korean"))

words = text.lower().split()

filtered_words = [word for word in words if word not in stop_words]

filtered_text = " ".join(filtered_words)

collection.add(
    documents=[filtered_text],
    metadatas=[{"source": "school.txt"}],
    ids=["library_document"]
)

query_texts = ["교육"]
results = collection.query(query_texts=query_texts, n_results=5)

for result in results:
    if isinstance(result, dict):
        doc_id = result.get("id", "N/A")
        score = result.get("score", "N/A")
        document_text = result.get("document_text", "N/A")  # 검색 결과의 문서 텍스트를 가져옴
        print("문서 ID:", doc_id)
        print("유사도:", score)
        print("검색 결과:", document_text)  # 검색 결과의 문서 텍스트 출력
        print()
    else:
        print("결과가 잘못 반환되었습니다.")
